401422078/
pycryptodome

# cryptography and block mining 

This project was done for the purpose of testing one cryptography python library and also getting insight from the blockchain mechanism 

## Description

In this project, we use one of the famous cryptography python libraries and use the standard hashlib library. And we try different modules and methods of these libraries for purpose of encryption, decryption, signing, verification, and creating a simple blockchain and study different concepts that are used for chaining blocks and mining them. 

## Getting Started

### Dependencies

* All of the dependencies are mentioned in the requirements.txt file. We used python3.9 for running codes and used just one external library pycrypto, and a bunch of standard libraries like time, JSON, hashlib that didn't need separate installation and, by default, those are in the python ecosystem.

* Note: pycrypto library has difficulty installing in the windows operating system. So we need to install pycryptodome library.

### Installing

* You can clone my project and go to my project's directory and run the below script in command line to install the necessary libraries before running the code

```python
pip install -r requirements.txt

```


### Executing program

* For the cryptography exercise, you need to run the below script in the command line and the directory of the project.  

```python
python tamrin1.py

```

At the end of this file, we have called functions like encrypt(), decrypt(), sign(), and verify(). You can change the argument of these functions and then rerun this file.


* For the mining block exercise, you need to run the below script in the command line and the directory of the project. 


```
python tamrin2.py 
```
At the end of this file, we have called functions like encrypt(), decrypt(), sign(), and verify(). You can change the argument of these functions and then rerun this file.
## Help

With a tiny probability, there may be a conflict between the installed libraries and the version of Python, so it is better to use Python version 3.9 like me. With this version, install libraries and run codes.

## Authors

This project has just one contributor. if you have any question, you can send me email. 

* saqar khalilpour

* [saqarkpr@gmail.com](saqarkpr@gmail.com)

## Version History


* 0.1
    * Initial Release

## License

This project is licensed under the MIT License

## Acknowledgments

Thanks to these documents that give me insight and code snippets
* [pycrypto](https://www.pycrypto.org/)
* [hashlib](https://docs.python.org/3/library/hashlib.html)
* [time](https://docs.python.org/3/library/time.html)
* [json](https://www.w3schools.com/python/python_json.asp)
# neccessary imports 
from Crypto.PublicKey import RSA  # we will use this module for create public and private key 
from Crypto.Hash import SHA512, SHA256 # when i read document, i found that there is different algorithm hashing 
from Crypto import Random # we will use this module in generating public and private key
from Crypto.Cipher import PKCS1_OAEP # we will use this module for encrypting 
from Crypto.Signature import PKCS1_v1_5 # we will use this module for creaing signer based on privatekey



# we will use below function for generating private and random key 
def newkeys(keysize):
   random_generator = Random.new().read
   key = RSA.generate(keysize, random_generator)
   private, public = key, key.publickey()
   return public, private


# we will use below function for passing private_key and then getting pair public key 
def getpublickey(priv_key):
   return priv_key.publickey()


# we will use below function for encryption input message with public key 
def encrypt(message, pub_key):
   cipher = PKCS1_OAEP.new(pub_key)
   return cipher.encrypt(message)
 
 
# we will use below function for decryption input cipher with private key
def decrypt(ciphertext, priv_key):
   cipher = PKCS1_OAEP.new(priv_key)
   return cipher.decrypt(ciphertext)

hash = "SHA-256" # our global variable that we use it in sign and verify function 

# we will use below function for signing input message with private key and selected hash algorithms 
def sign(message, priv_key, hashAlg = "SHA-256"):
   global hash # our default algorithm 

   hash = hashAlg
   signer = PKCS1_v1_5.new(priv_key)
   
   if (hash == "SHA-512"):
      digest = SHA512.new()
   elif (hash == "SHA-256"):
      digest = SHA256.new()
   else:
      pass
   digest.update(message)
   return signer.sign(digest)
 
 
# we will use below function for for checking validation of signature with input message and public_key and sinature
def verify(message, signature, pub_key):
   signer = PKCS1_v1_5.new(pub_key)
   if (hash == "SHA-512"):
      digest = SHA512.new()
   elif (hash == "SHA-256"):
      digest = SHA256.new()
   else:
      pass
   digest.update(message)
   return signer.verify(digest, signature)
 

# our tests ...

print('''
                                                  ###############
                                                  ### test1  ###
                                                  #############
                                                  ''')
# create first private key and public key and check methods of encryption and decryption and signing and verifying 
print("-----------------------------------------------------------------------------------------------------")
print("generating public and private key ... ")
public_sample, private_sample = newkeys(1024)
print(f"after calling newkeys(), public key and private key is : \n {public_sample} \n {private_sample}")
print("-----------------------------------------------------------------------------------------------------")
# this is our text for testing 
text = b"this is a test1"

print(f"generating cipher text ... for text {text} ")
cipher_text = encrypt(text, public_sample)
print(f"after calling encrypt(), cipher text is : \n {cipher_text} ")
print("-----------------------------------------------------------------------------------------------------")
print("decrypting cipher text ... ")
decrypt_text = decrypt(cipher_text, private_sample)
print (f"after calling decrypt(), decrypt message is : \n {decrypt_text}")
print("-----------------------------------------------------------------------------------------------------")
print("getting signature of message with private key ...")
signature_sample = sign(text, private_sample)
print(f"after calling sign() function, signature is : \n {signature_sample}")
print("-----------------------------------------------------------------------------------------------------")
print("we verify the validation of signature .... ")
bool = verify(text, signature_sample, public_sample) # because we used 2 same sgnature and pulic key, the result must be true
print(f"verification is : \n {bool}")
print("-----------------------------------------------------------------------------------------------------")



print('''
                                                  ###############
                                                  ### test2  ###
                                                  #############
                                                  ''')
# create other public key and private key
print("-----------------------------------------------------------------------------------------------------")
print("generating public and private key ... ")
public_sample2, private_sample2 = newkeys(1024)
print(f"after calling newkeys(), public key and private key is : \n {public_sample} \n {private_sample}")
print("-----------------------------------------------------------------------------------------------------")
# this is our text for testing 
text2 = b"this is a test2"
print("-----------------------------------------------------------------------------------------------------")
print("getting signature of message with private key ...")
signature_sample2 = sign(text2, private_sample2)
print(f"after calling sign() function, signature is : \n {signature_sample2}")
print("-----------------------------------------------------------------------------------------------------")
print("we verify the validation of signature .... ")
bool2 = verify(text2, signature_sample2, public_sample2) # because we used 2 same sgnature and pulic key, the result must be true
print(f"verification is : \n {bool2}")
print("-----------------------------------------------------------------------------------------------------")


print('''
                                                  ###############
                                                  ### test3  ###
                                                  #############
                                                  ''')
# test different publickey and signature that comes from "test1" and "test2" and check sign method 
print("we verify the validation of signature and it's message with other public_sample! ")
bool3 = verify(text2, signature_sample2, public_sample) # because we used 2 different sgnature and pulic key, the result must be false
print(f"verification is : \n {bool3}")
print("-----------------------------------------------------------------------------------------------------")


# import neccessary libraries
# we don't need external library. we will just use a bunch of standard library
import time # we will use this module for setting time of transaction
import json # we will use this module for formatting content of our block
from hashlib import sha256 # we will use this module for hashing the content of block



# the best data structure for saving content of each block is json format
# we can use json format like below : 
                                              # {   
                                              #     "author": "name of author",
                                              #     "timestamp": "the time of transaction", 
                                              #     "data": "content of transaction"
                                              # }



# first of all we need to create a block class and in the future, we will create objects from this block and then chain them
class Block:
    def __init__(self, index, transactions, timestamp, previous_hash):
      # in this function we need to set some attribute for our block 
      # we also pass the previous hash block and use it in current block!( because of protecting integrity of chain)
        self.index = index
        self.transactions = transactions
        self.timestamp = timestamp
        self.previous_hash = previous_hash
        self.nonce = 0

    # in below function we hash the content of block. because we don't want anyone can read the content of block or write sth on it
    # each block has this fucntion and with calling this function, we get the hash of block's content
    def compute_hash(self):

        block_string = json.dumps(self.__dict__, sort_keys=True)
        return sha256(block_string.encode()).hexdigest()
      
      

# create blockchain class that we can handle the chain and add or mine blocks
class Blockchain:
    # below parameter, adjust the difficulty of our algorithm, and in excercise, mentioned that set this paramer to 4 ( means 4 zero)
    difficulty = 4   
     
    def __init__(self):
        self.unconfirmed_transactions = []
        self.chain = []
        self.create_genesis_block()

    
    # we use this function for initializing the blockchain. actaully this function creates an initial block with an index of 0 and a previous hash of 0, and then add this to the chain. actually this genesis block is the name of block the bitcoin used it! 
    def create_genesis_block(self):
        genesis_block = Block(0, [], time.time(), "0")
        genesis_block.hash = genesis_block.compute_hash()
        self.chain.append(genesis_block)

    @property
    def last_block(self):
        return self.chain[-1]


    # the adding block mechanism is used when we mine the blocks. actually in mining we check the verification of transaction.
    # in this function, first of all we check the hash of last block in the chain with the hash of the "previous hash" of block that saved in the block that we want to add to the chain. they must be the same!. after that we check other validiy with is_valid_proof() function. that we will comment about it in future
    def add_block(self, block, proof):

        previous_hash = self.last_block.hash

        if previous_hash != block.previous_hash:
            return False

        if not self.is_valid_proof(block, proof):
            return False

        block.hash = proof
        self.chain.append(block)
        return True

    # as i said before, we used this function in add_block() function. actually this function checks whether the block_hash is valid hash of block and has the difficulty ( that is 4 zero! in excercise)
    def is_valid_proof(self, block, block_hash):

        return (block_hash.startswith('0' * Blockchain.difficulty) and
                block_hash == block.compute_hash())

    # this function tries different values for nonce to get a hash that has our difficulty( that is 4 zero! in excercise), and we call it when we are creating new block in mine() function
    def proof_of_work(self, block):

        block.nonce = 0

        computed_hash = block.compute_hash()
        # as said in tamrin : we start with 4 zero
        while not computed_hash.startswith('0' * Blockchain.difficulty):
            block.nonce += 1
            computed_hash = block.compute_hash()

        return computed_hash

    # use this function for adding new transaction and then use mine function to mine it 
    def add_new_transaction(self, transaction):
        self.unconfirmed_transactions.append(transaction)



# below function add transactions to the blockchain, but before adding them, create a blcok object and then evaluate proof_of_work of that block 
    def mine(self):

        if not self.unconfirmed_transactions:
            return False

        last_block = self.last_block

        new_block = Block(index=last_block.index + 1,
                          transactions=self.unconfirmed_transactions,
                          timestamp=time.time(),
                          previous_hash=last_block.hash)

        proof = self.proof_of_work(new_block)
        self.add_block(new_block, proof)

        self.unconfirmed_transactions = []
        return new_block.index




# before testing we just need to create an empty blockchain and initialize it 
blockchain = Blockchain()
# create a function for getting content of chain with json format 
def chain():
    chain_data = []
    for block in blockchain.chain:
        chain_data.append(block.__dict__)
    return json.dumps({"length": len(chain_data), "chain": chain_data})
    
    
# test 
print("-----------------------------------------------------------------------------------------------------")
print(f"the early chain is : \n {chain()}")
print("-----------------------------------------------------------------------------------------------------")
blockchain.add_new_transaction(["ali paid to amir 10000 rials"])
print("adding pending transaction and mining chain .... ")
print(f"block.mine() : {blockchain.mine()}")
print(f"the chain is : \n {chain()}")
print("-----------------------------------------------------------------------------------------------------")
blockchain.add_new_transaction(["hamid paid to parisa 200000 rials"])
print("adding pending transaction and mining chain .... ")
print(f"block.mine() : {blockchain.mine()}")
print(f"the chain is : \n {chain()}")
print("-----------------------------------------------------------------------------------------------------")
blockchain.add_new_transaction(["reza paid to sadegh 800000 rials"])
print("adding pending transaction and mining chain .... ")
print(f"block.mine() : {blockchain.mine()}")
print(f"the chain is : \n {chain()}")
print("-----------------------------------------------------------------------------------------------------")
blockchain.add_new_transaction(["yasam paid to sadegh 9000 rials"])
print("adding pending transaction and mining chain .... ")
print(f"block.mine() : {blockchain.mine()}")
print(f"the chain is : \n {chain()}")
print("-----------------------------------------------------------------------------------------------------")
