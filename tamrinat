{"cells":[{"cell_type":"markdown","metadata":{},"source":["## `Author` : Sheida Sheikhzadegan\n","\n","## `Date` : Aban 1401"]},{"cell_type":"markdown","metadata":{"id":"oAwSVgeDsq7l"},"source":["## create requirements.txt file "]},{"cell_type":"code","execution_count":60,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":369,"status":"ok","timestamp":1668761185827,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"eWnPLb-vTkLI","outputId":"0ea9cc83-8d6b-485e-aea0-897f39260393"},"outputs":[{"name":"stdout","output_type":"stream","text":["Overwriting requirements.txt\n"]}],"source":["%%writefile requirements.txt\n","pycrypto\n","hashlib\n","json\n","time\n"]},{"cell_type":"code","execution_count":59,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":929,"status":"ok","timestamp":1668761164959,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"Yw4L6M0cTr0q","outputId":"09fd1074-7b2e-415a-88ca-167489a15504"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pycrypto in /usr/local/lib/python3.7/dist-packages (from -r requirements.txt (line 1)) (2.6.1)\n","\u001b[31mERROR: Could not find a version that satisfies the requirement json (from versions: none)\u001b[0m\n","\u001b[31mERROR: No matching distribution found for json\u001b[0m\n"]}],"source":["!pip install -r requirements.txt"]},{"cell_type":"markdown","metadata":{},"source":["## create ReadMe file"]},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":400,"status":"ok","timestamp":1668760267467,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"B892d9gmuG0m","outputId":"abfb7a10-2081-4da1-93d8-e463a739cc8c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Overwriting ReadMe.md\n"]}],"source":["%%writefile ReadMe.md\n","just open notebook in \"google colab\" or \"jupyter\" and run cells \n","or you can open .html version of notebook in browser and see the outputs without running my code "]},{"cell_type":"markdown","metadata":{"id":"AniYlgvvswNy"},"source":["## tamrin 2 : mining a block"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jJhq43jrBdBK"},"outputs":[],"source":["from hashlib import sha256\n","import json\n","import time\n","\n","\n","'''\n","I will use the standard JSON format to store data in each block. The data for each block looks something like:\n","{   \n","    \"author\": \"author_name\",\n","    \"timestamp\": \"transaction_time\", \n","    \"data\": \"transaction_data\"\n","}\n","\n","to implement this in Python, we first create a block class with the aforementioned attributes.\n","we also want to make each block unique in order to ensure that duplications do not occur.\n","\n","'''\n","class Block:\n","    def __init__(self, index, transactions, timestamp, previous_hash):\n","        self.index = index\n","        self.transactions = transactions\n","        self.timestamp = timestamp\n","        self.previous_hash = previous_hash\n","        self.nonce = 0\n","\n","    # we use this function for hashing the blocks and make it extremely difficult to tamper with the data within the blocks\n","    def compute_hash(self):\n","        \"\"\"\n","        A function that return the hash of the block contents\n","        \"\"\"\n","        block_string = json.dumps(self.__dict__, sort_keys=True)\n","        return sha256(block_string.encode()).hexdigest()\n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":33,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1668760270506,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"sWSstkZVnyNA"},"outputs":[],"source":["# create blockchain class \n","'''\n","we want to create new class for the blockchain. In order to ensure the immutability of the entire blockchain,\n","we will use the clever approach of including a hash of the previous block within the current block.\n","The awareness of all data within each block establishes a mechanism for protecting the entire chain’s integrity.\n","This is why we included the previous_hash variable in the block class. We also need a way to initialize the blockchain,\n","so we define the create_genesis_blockmethod. This creates an initial block with an index of 0 and a previous hash of 0.\n","We then add this to the list chain that keeps track of each block.\n","\n","'''\n","class Blockchain:\n","    # difficulty of our algorithm\n","    difficulty = 4   # in tamrin is said to set this with 4 zero !\n","\n","    def __init__(self):\n","        self.unconfirmed_transactions = []\n","        self.chain = []\n","        self.create_genesis_block()\n","\n","    def create_genesis_block(self):\n","        \"\"\"\n","        A function to generate genesis block and appends it to\n","        the chain. The block has index 0, previous_hash as 0, and\n","        a valid hash.\n","        \"\"\"\n","        genesis_block = Block(0, [], time.time(), \"0\")\n","        genesis_block.hash = genesis_block.compute_hash()\n","        self.chain.append(genesis_block)\n","\n","    @property\n","    def last_block(self):\n","        return self.chain[-1]\n","\n","    # we will use this method in mine method ! \n","    # proof argument is output of proof_of_work() function \n","    def add_block(self, block, proof):\n","        \"\"\"\n","        a function that adds the block to the chain after verification.\n","        verification includes:\n","        1. Checking if the proof is valid.\n","        2. The previous_hash referred in the block and the hash of latest block\n","          in the chain match.\n","        \"\"\"\n","        previous_hash = self.last_block.hash\n","\n","        if previous_hash != block.previous_hash:\n","            return False\n","\n","        if not self.is_valid_proof(block, proof):\n","            return False\n","\n","        block.hash = proof\n","        self.chain.append(block)\n","        return True\n","\n","    # we will use this functino in add_block() function\n","    def is_valid_proof(self, block, block_hash):\n","        \"\"\"\n","        Check if block_hash is valid hash of block and satisfies\n","        the difficulty criteria.\n","        \"\"\"\n","        return (block_hash.startswith('0' * Blockchain.difficulty) and\n","                block_hash == block.compute_hash())\n","\n","    # we will use this function in mine() function \n","    def proof_of_work(self, block):\n","        \"\"\"\n","        Function that tries different values of nonce to get a hash\n","        that satisfies our difficulty criteria.\n","        \"\"\"\n","        block.nonce = 0\n","\n","        computed_hash = block.compute_hash()\n","        # as said in tamrin : we start with 4 zero\n","        while not computed_hash.startswith('0' * Blockchain.difficulty):\n","            block.nonce += 1\n","            computed_hash = block.compute_hash()\n","\n","        return computed_hash\n","\n","    # use this function for adding new transaction and then use mine function to mine it \n","    def add_new_transaction(self, transaction):\n","        self.unconfirmed_transactions.append(transaction)\n","\n","    def mine(self):\n","        \"\"\"\n","        This function serves as an interface to add the pending\n","        transactions to the blockchain by adding them to the block\n","        and figuring out Proof Of Work.\n","        \"\"\"\n","        if not self.unconfirmed_transactions:\n","            return False\n","\n","        last_block = self.last_block\n","\n","        new_block = Block(index=last_block.index + 1,\n","                          transactions=self.unconfirmed_transactions,\n","                          timestamp=time.time(),\n","                          previous_hash=last_block.hash)\n","\n","        proof = self.proof_of_work(new_block)\n","        self.add_block(new_block, proof)\n","\n","        self.unconfirmed_transactions = []\n","        return new_block.index\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","blockchain = Blockchain()\n","\n"]},{"cell_type":"code","execution_count":34,"metadata":{"executionInfo":{"elapsed":345,"status":"ok","timestamp":1668760443655,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"iE1q5QK3X3Sc"},"outputs":[],"source":["def get_chain():\n","    chain_data = []\n","    for block in blockchain.chain:\n","        chain_data.append(block.__dict__)\n","    return json.dumps({\"length\": len(chain_data),\n","                       \"chain\": chain_data})"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1668760445112,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"yS9DdxWaX3Ny","outputId":"1aba89ac-68f7-4b18-e496-4c9ca54f3778"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'{\"length\": 1, \"chain\": [{\"index\": 0, \"transactions\": [], \"timestamp\": 1668760270.776258, \"previous_hash\": \"0\", \"nonce\": 0, \"hash\": \"e8f2c4f80295f269624569a7246697823112d517650f2a391a844c31587231f5\"}]}'"]},"execution_count":35,"metadata":{},"output_type":"execute_result"}],"source":["get_chain()"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1668760447449,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"mpvkVcr_X2_U","outputId":"48ce1fe6-06a7-4456-fd61-13f6acab42c1"},"outputs":[{"data":{"text/plain":["False"]},"execution_count":36,"metadata":{},"output_type":"execute_result"}],"source":["blockchain.mine()"]},{"cell_type":"code","execution_count":37,"metadata":{"executionInfo":{"elapsed":368,"status":"ok","timestamp":1668760449965,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"VpBvxpUZX25S"},"outputs":[],"source":["blockchain.add_new_transaction([\"zahra give me 1000 toman\"])"]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2429,"status":"ok","timestamp":1668760455581,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"2wCG21NbX204","outputId":"de3fea72-566d-434d-e522-d90d192256e0"},"outputs":[{"data":{"text/plain":["1"]},"execution_count":38,"metadata":{},"output_type":"execute_result"}],"source":["blockchain.mine()"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":109},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1668760457665,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"C-SGdq8RrAjw","outputId":"48bd2a73-9c3d-4f22-c90b-718554d101a2"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'{\"length\": 2, \"chain\": [{\"index\": 0, \"transactions\": [], \"timestamp\": 1668760270.776258, \"previous_hash\": \"0\", \"nonce\": 0, \"hash\": \"e8f2c4f80295f269624569a7246697823112d517650f2a391a844c31587231f5\"}, {\"index\": 1, \"transactions\": [[\"zahra give me 1000 toman\"]], \"timestamp\": 1668760453.5071044, \"previous_hash\": \"e8f2c4f80295f269624569a7246697823112d517650f2a391a844c31587231f5\", \"nonce\": 207252, \"hash\": \"0000e6395f26b9374c651d7ee7fa0eacdc46bcceeceff0fa8c32aabcde293349\"}]}'"]},"execution_count":39,"metadata":{},"output_type":"execute_result"}],"source":["get_chain()"]},{"cell_type":"code","execution_count":40,"metadata":{"executionInfo":{"elapsed":351,"status":"ok","timestamp":1668760460976,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"rvbG_2wDsM4v"},"outputs":[],"source":["blockchain.add_new_transaction([\"I send sara 2000 toman\"])"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":581,"status":"ok","timestamp":1668760464156,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"v2EoQDPBsXEo","outputId":"7136f5fc-00a0-4d29-ce29-319029dd2cbf"},"outputs":[{"data":{"text/plain":["2"]},"execution_count":41,"metadata":{},"output_type":"execute_result"}],"source":["blockchain.mine()"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":163},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1668760466139,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"-6g6qujMsZHp","outputId":"9af8daec-2841-42b4-9367-34047aac9291"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'{\"length\": 3, \"chain\": [{\"index\": 0, \"transactions\": [], \"timestamp\": 1668760270.776258, \"previous_hash\": \"0\", \"nonce\": 0, \"hash\": \"e8f2c4f80295f269624569a7246697823112d517650f2a391a844c31587231f5\"}, {\"index\": 1, \"transactions\": [[\"zahra give me 1000 toman\"]], \"timestamp\": 1668760453.5071044, \"previous_hash\": \"e8f2c4f80295f269624569a7246697823112d517650f2a391a844c31587231f5\", \"nonce\": 207252, \"hash\": \"0000e6395f26b9374c651d7ee7fa0eacdc46bcceeceff0fa8c32aabcde293349\"}, {\"index\": 2, \"transactions\": [[\"I send sara 2000 toman\"]], \"timestamp\": 1668760463.5749757, \"previous_hash\": \"0000e6395f26b9374c651d7ee7fa0eacdc46bcceeceff0fa8c32aabcde293349\", \"nonce\": 59763, \"hash\": \"0000bf0752358cdf050e45bfd9de006736495f80254a7464ea325da7f539657d\"}]}'"]},"execution_count":42,"metadata":{},"output_type":"execute_result"}],"source":["get_chain()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wt9UtW6jtMpi"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ufWBBE-4tMev"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"q6_1obH74F4X"},"source":["## tamrin 1 : RSA algorithm"]},{"cell_type":"markdown","metadata":{"id":"tUNQoofCS2so"},"source":["The following steps are involved in generating RSA keys :\n","\n","1. Create two large prime numbers namely p and q. The product of these numbers will be called n, where n= p*q\n","\n","2. Generate a random number which is relatively prime with (p-1) and (q-1). Let the number be called as e.\n","\n","3. Calculate the modular inverse of e. The calculated inverse will be called as d."]},{"cell_type":"markdown","metadata":{"id":"OOAkIucIME2s"},"source":["## RSA encryption, decryption, sign and verify signature\n","\n","## you can find answer of الف و ب و پ  in this cell"]},{"cell_type":"code","execution_count":44,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23112,"status":"ok","timestamp":1668760584203,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"shPJ7Qwe4U8Y","outputId":"d424e18c-42f2-4d97-f336-ad43678971ea"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pycrypto\n","  Using cached pycrypto-2.6.1.tar.gz (446 kB)\n","Building wheels for collected packages: pycrypto\n","  Building wheel for pycrypto (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pycrypto: filename=pycrypto-2.6.1-cp37-cp37m-linux_x86_64.whl size=499932 sha256=be178e1c12d96f08f527f0110ffd1271d9facb748364a84aa4af4d50520c6e4c\n","  Stored in directory: /root/.cache/pip/wheels/cf/85/ba/bbd7c96add459de7598fb424e5ff2309baf2095c844ac0f191\n","Successfully built pycrypto\n","Installing collected packages: pycrypto\n","Successfully installed pycrypto-2.6.1\n"]}],"source":["!pip install pycrypto"]},{"cell_type":"code","execution_count":45,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1668760588962,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"jedHdSG1MGjN"},"outputs":[],"source":["from Crypto.PublicKey import RSA\n","from Crypto.Cipher import PKCS1_OAEP\n","from Crypto.Signature import PKCS1_v1_5\n","from Crypto.Hash import SHA512, SHA384, SHA256, SHA, MD5\n","from Crypto import Random\n","from base64 import b64encode, b64decode\n","hash = \"SHA-256\"\n","\n","\n","# create new pulic and private key \n","def newkeys(keysize):\n","   random_generator = Random.new().read\n","   key = RSA.generate(keysize, random_generator)\n","   private, public = key, key.publickey()\n","   return public, private\n","\n","def importKey(externKey):\n","   return RSA.importKey(externKey)\n","\n","\n","# get pulic key associated with private key \n","def getpublickey(priv_key):\n","   return priv_key.publickey()\n","\n","\n","# get message and encrypt it with public key \n","def encrypt(message, pub_key):\n","   cipher = PKCS1_OAEP.new(pub_key)\n","   return cipher.encrypt(message)\n","\n","\n","# get cipher text and decrypt it with private key \n","def decrypt(ciphertext, priv_key):\n","   cipher = PKCS1_OAEP.new(priv_key)\n","   return cipher.decrypt(ciphertext)\n","\n","\n","# ب \n","# sign message with message and private key and different hash algorithms \n","def sign(message, priv_key, hashAlg = \"SHA-256\"):\n","   global hash\n","   hash = hashAlg\n","   signer = PKCS1_v1_5.new(priv_key)\n","   \n","   if (hash == \"SHA-512\"):\n","      digest = SHA512.new()\n","   elif (hash == \"SHA-384\"):\n","      digest = SHA384.new()\n","   elif (hash == \"SHA-256\"):\n","      digest = SHA256.new()\n","   elif (hash == \"SHA-1\"):\n","      digest = SHA.new()\n","   else:\n","      digest = MD5.new()\n","   digest.update(message)\n","   return signer.sign(digest)\n","\n","\n","# پ\n","# get message, signature and public key and check validation of signature \n","def verify(message, signature, pub_key):\n","   signer = PKCS1_v1_5.new(pub_key)\n","   if (hash == \"SHA-512\"):\n","      digest = SHA512.new()\n","   elif (hash == \"SHA-384\"):\n","      digest = SHA384.new()\n","   elif (hash == \"SHA-256\"):\n","      digest = SHA256.new()\n","   elif (hash == \"SHA-1\"):\n","      digest = SHA.new()\n","   else:\n","      digest = MD5.new()\n","   digest.update(message)\n","   return signer.verify(digest, signature)"]},{"cell_type":"code","execution_count":46,"metadata":{"executionInfo":{"elapsed":367,"status":"ok","timestamp":1668760615834,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"j5HULOoyUb6g"},"outputs":[],"source":["public1, private1 = newkeys(1024)"]},{"cell_type":"code","execution_count":47,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":339,"status":"ok","timestamp":1668760625275,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"TXjBtbTpUdMu","outputId":"3c518d44-1cae-406a-999d-66e769ddc267"},"outputs":[{"data":{"text/plain":["Crypto.PublicKey.RSA._RSAobj"]},"execution_count":47,"metadata":{},"output_type":"execute_result"}],"source":["type(public1)"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":367,"status":"ok","timestamp":1668760633523,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"XmI40GxDUr-E","outputId":"dc43f495-b596-4a96-e817-110e764f3d5f"},"outputs":[{"data":{"text/plain":["<_RSAobj @0x7fada434be90 n(1024),e>"]},"execution_count":48,"metadata":{},"output_type":"execute_result"}],"source":["getpublickey(private1)"]},{"cell_type":"code","execution_count":49,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1668760641438,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"U7w8O-UuUyFF"},"outputs":[],"source":["cipher_text = encrypt(b\"how are you\",public1)"]},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1668760648817,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"3kqRBwKBMWox","outputId":"adbede8a-d712-49f0-9fb9-3123409c4517"},"outputs":[{"data":{"text/plain":["b'how are you'"]},"execution_count":50,"metadata":{},"output_type":"execute_result"}],"source":["decrypt(cipher_text, private1)"]},{"cell_type":"code","execution_count":54,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1668760686251,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"dVsGvysvW2BW"},"outputs":[],"source":["signature1 = sign(b\"how are you\", private1)"]},{"cell_type":"code","execution_count":55,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1668760687415,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"a-7FFE6uXZmF","outputId":"953b58fa-186e-494c-ce54-a592baac1b0e"},"outputs":[{"name":"stdout","output_type":"stream","text":["b'2\\n\\xc6O\\xe0\\t\\r\\xa7\\xfb=8F\\x96ke\\x8e\\x1c_\\xd2\\x84\\xcd.f\\x86\\xd2\\xd5\\xf7\\xc1\\xe3\\x9c\\xcbH\\x94X\\x98\\x0cS\\xf7\\x04\\x0f\\xc4|\\x8c\\xea\\x0c\\xfb\\xf6\\x85&\\xdd\\xa7O_\\xd7#\\xe2\\xfcWv\\x17\\xdd\\xf3>c19@:Rl_+\\x95\\x06ny\\xe1G`i 6\\xb4\\xadN\\xd3u\\xda\\x12\\xb4\\xf6|\\xf1\\x94\\x10\\xda\\x1f\\xfd\\xeagp\\x95\\xa3\\xf8v\\x90(\\xff\\x9cOg\\xff\\xc0\\xc1H\\xf1\\x1f[\\x94\\x1a+f\\x18;\\x97\\xd6\\xb0\\xd5'\n"]}],"source":["print(signature1)"]},{"cell_type":"code","execution_count":53,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1668760667805,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"oFCtXEICXIFI","outputId":"a912ef96-65ce-4b82-a981-83d309a15564"},"outputs":[{"data":{"text/plain":["True"]},"execution_count":53,"metadata":{},"output_type":"execute_result"}],"source":["# check validation of signature. output must be true\n","verify(b\"how are you\", signature1, public1)"]},{"cell_type":"code","execution_count":57,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":940,"status":"ok","timestamp":1668760771078,"user":{"displayName":"mohamamd ali","userId":"00822065113847723459"},"user_tz":-210},"id":"iCnXL58kXT-h","outputId":"b9e98180-1593-486c-b612-76dfa7db8bd4"},"outputs":[{"data":{"text/plain":["False"]},"execution_count":57,"metadata":{},"output_type":"execute_result"}],"source":["# check validation of signature. output must be false\n","public2, private2 = newkeys(1024)\n","signature2 = sign(b\"how are you\", private2)\n","verify(b\"how are you\", signature2, public1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w7RFyO2Y5HrI"},"outputs":[],"source":[]}],"metadata":{"colab":{"authorship_tag":"ABX9TyN4Ub7+o7722UD1KjCCYaeA","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}
